#!/bin/sh

# An http(s) server emulator which starts a capture
# once an incoming connection is established.

# Environment variables used:
#  CAPTURE_CERT: path to a file with HTTPS certificate (enables HTTPS)
#  CAPTURE_KEY: private key for the HTTPS certificate
#  CAPTURE_PASSWORD: a string to look for in the URL (poor man's access control)
# See also variables in "capture" script.

MYDIR="$(cd "$(dirname "$0")" || exit; pwd)"

if [ $# -gt 0 ]; then
	listen_command="-listen:$1,reuseaddr,fork"
	if [ -n "$CAPTURE_CERT" ]; then
		tls_options="cert=${CAPTURE_CERT?},key=${CAPTURE_KEY?},verify=0"
		listen_command="openssl$listen_command,$tls_options"
	else
		listen_command="tcp$listen_command"
	fi
	exec socat "$listen_command" EXEC:"$MYDIR/$(basename "$0")"
fi

read -r URL
if echo "$URL" | grep -Eq "[.]jpe?g "; then
	export CAPTURE_FPS=""
else
	# Set CAPTURE_FPS if not JPEG (image) is requested.
	export CAPTURE_FPS="${CAPTURE_FPS:-20}"
fi

if [ -n "${CAPTURE_PASSWORD}" ]; then
	if ! echo "$URL" | grep -q "${CAPTURE_PASSWORD}"; then
		echo "Invalid password, access denied" >&2
		printf "HTTP/1.1 403 Forbidden\n\n403 Forbidden"
		exit 1
	fi
fi

printf "HTTP/1.1 200 OK\nServer: raspivid (socat, bash)\n"

if [ -n "${CAPTURE_FPS}" ]; then
	echo "Content-Type: video/h264"
else
	echo "Content-Type: image/jpeg"
fi

echo
# Redirect stderr to HTTP stream - we've already sent Content-Type in, but it's
# easier to detect wrong format client-side than implement back-and-forth
# flipping at the server.
exec "$MYDIR/capture" 2>&1
